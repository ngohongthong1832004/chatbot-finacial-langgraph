import psycopg2
import pandas as pd

import os
from langchain_core.runnables import RunnablePassthrough, RunnableLambda
from dotenv import load_dotenv
import requests

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

def call_openrouter(prompt_obj) -> str:
    prompt = prompt_obj.to_string()  

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-4o-mini",
        "messages": [
            {"role": "system", "content": "You are an expert grader assessing relevance of a retrieved document to a user question. Answer only 'yes' or 'no'."},
            {"role": "user", "content": prompt}
        ]
    }

    res = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    if res.status_code == 200:
        return res.json()["choices"][0]["message"]["content"].strip()
    else:
        raise RuntimeError(f"OpenRouter API error: {res.status_code} - {res.text}")

# D√πng os.environ ƒë·ªÉ truy c·∫≠p
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")

def get_db_config():
    return {
    "dbname": os.getenv("DBNAME"),
    "user": os.getenv("DBUSER"),
    "password": os.getenv("DBPASSWORD"),
    "host": os.getenv("DBHOST"),
    "port": int(os.getenv("DBPORT", 5432)),
    "sslmode": os.getenv("SSL_MODE", "require")
}

def connect_to_database():
    try:
        conn = psycopg2.connect(**get_db_config())
        print("‚úÖ Successfully connected to PostgreSQL.")
        return conn
    except Exception as e:
        print(f"‚ùå Database connection error: {e}")
        return None

def execute_sql_query(conn, query):
    try:
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        print(f"‚ùå SQL execution error: {e}")
        return None

def get_schema_and_samples(conn=None):
    # Lu√¥n d√πng metadata d·∫°ng text cung c·∫•p th·ªß c√¥ng
    try:
        # ƒê√¢y l√† metadata b·∫°n y√™u c·∫ßu d√πng ƒë·ªÉ thay cho vi·ªác truy v·∫•n schema
        metadata_text = """
            C∆° s·ªü d·ªØ li·ªáu n√†y l∆∞u tr·ªØ th√¥ng tin v·ªÅ c√°c c√¥ng ty trong ch·ªâ s·ªë Dow Jones Industrial Average (DJIA) v√† d·ªØ li·ªáu gi√° c·ªï phi·∫øu l·ªãch s·ª≠ c·ªßa h·ªç.
            ƒê√¢y l√† hai b·∫£ng ch√≠nh trong c∆° s·ªü d·ªØ li·ªáu m√† h·ªá th·ªëng c√≥ tham kh·∫£o n√≥ ƒë·ªÉ t·∫°o c√¢u truy v·∫•n SQL:
            CREATE TABLE public.djia_companies (
                symbol text NOT NULL,
                name text,
                sector text,
                industry text,
                country text,
                website text,
                market_cap bigint,
                pe_ratio double precision,
                dividend_yield double precision,
                "52_week_high" double precision,
                "52_week_low" double precision,
                description text
            );

            ALTER TABLE public.djia_companies OWNER TO postgres;

            CREATE TABLE public.djia_prices (
                "Date" timestamp with time zone,
                "Open" double precision,
                "High" double precision,
                "Low" double precision,
                "Close" double precision,
                "Volume" bigint,
                "Dividends" text,
                "Stock Splits" text,
                "Ticker" text NOT NULL
            );
            ALTER TABLE public.djia_prices OWNER TO postgres;
            
            C√°c b·∫£ng:

            djia_companies: Th√¥ng tin v·ªÅ c√°c c√¥ng ty DJIA.

            symbol (VARCHAR): M√£ c·ªï phi·∫øu (Kh√≥a ch√≠nh).
            name (VARCHAR): T√™n c√¥ng ty.
            sector (VARCHAR): Lƒ©nh v·ª±c kinh doanh.
            industry (VARCHAR): Ng√†nh c·ª• th·ªÉ.
            country (VARCHAR): Qu·ªëc gia tr·ª• s·ªü.
            C√°c c·ªôt kh√°c: website, market_cap (BIGINT), pe_ratio (FLOAT), dividend_yield (FLOAT), 52_week_high (FLOAT), 52_week_low (FLOAT), description (TEXT).

            djia_prices: D·ªØ li·ªáu gi√° c·ªï phi·∫øu l·ªãch s·ª≠ h√†ng ng√†y.

            "Date" (TIMESTAMP): Ng√†y giao d·ªãch.
            "Open" (FLOAT): Gi√° m·ªü c·ª≠a.
            "High" (FLOAT): Gi√° cao nh·∫•t.
            "Low" (FLOAT): Gi√° th·∫•p nh·∫•t.
            "Close" (FLOAT): Gi√° ƒë√≥ng c·ª≠a.
            "Volume" (INTEGER): Kh·ªëi l∆∞·ª£ng giao d·ªãch.
            "Dividends" (FLOAT ho·∫∑c TEXT, n√™n √©p ki·ªÉu FLOAT khi d√πng v·ªõi AVG/SUM): C·ªï t·ª©c.
            "Stock Splits" (FLOAT): T·ª∑ l·ªá chia t√°ch c·ªï phi·∫øu.
            "Ticker" (VARCHAR): M√£ c·ªï phi·∫øu (Kh√≥a ngo·∫°i tham chi·∫øu djia_companies.symbol).

            T√†i li·ªáu h·ªá th·ªëng m·ªôt s·ªë m√£ trong c·ªôt Ticker c·ªßa b·∫£ng djia_prices:
            AAPL - Apple Inc.
            AMGN - Amgen Inc.
            AXP  - American Express
            BA   - Boeing Co.
            CAT  - Caterpillar Inc.
            CRM  - Salesforce Inc.
            CSCO - Cisco Systems
            CVX  - Chevron Corp.
            DIS  - Walt Disney Co.
            DOW  - Dow Inc.
            GS   - Goldman Sachs
            HD   - Home Depot
            HON  - Honeywell International
            IBM  - International Business Machines
            INTC - Intel Corp.
            JNJ  - Johnson & Johnson
            JPM  - JPMorgan Chase
            KO   - Coca-Cola Co.
            MCD  - McDonald's Corp.
            MMM  - 3M Company
            MRK  - Merck & Co.
            MSFT - Microsoft Corp.
            NKE  - Nike Inc.
            PG   - Procter & Gamble
            TRV  - Travelers Companies
            UNH  - UnitedHealth Group
            V    - Visa Inc.
            VZ   - Verizon Communications
            WBA  - Walgreens Boots Alliance
            WMT  - Walmart Inc.

            L∆∞u √Ω quan tr·ªçng cho PostgreSQL:

            T√™n c√°c c·ªôt trong b·∫£ng djia_prices l√† ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng.
            Lu√¥n s·ª≠ d·ª•ng d·∫•u ngo·∫∑c k√©p cho c√°c c·ªôt n√†y trong truy v·∫•n: "Date", "Open", "High", "Low", "Close", "Volume", "Dividends", "Stock Splits", "Ticker".
            T√™n c√°c c·ªôt trong b·∫£ng djia_companies kh√¥ng c·∫ßn d·∫•u ngo·∫∑c k√©p.

            V√≠ d·ª• truy v·∫•n SQL:

            1. L·∫•y 10 c√¥ng ty c√≥ P/E ratio cao nh·∫•t:
            SELECT name, pe_ratio
            FROM djia_companies
            ORDER BY pe_ratio DESC
            LIMIT 10;

            2. L·∫•y gi√° ƒë√≥ng c·ª≠a cao nh·∫•t c·ªßa m·ªói c√¥ng ty trong ng√†y g·∫ßn nh·∫•t:
            SELECT c.name, MAX(p."Close") AS max_close
            FROM djia_companies c
            JOIN djia_prices p ON c.symbol = p."Ticker"
            WHERE p."Date" = (SELECT MAX("Date") FROM djia_prices)
            GROUP BY c.name;

            3. L·∫•y gi√° ƒë√≥ng c·ª≠a c·ªßa Apple trong th√°ng 3 nƒÉm 2024:
            SELECT c.name, p."Date", p."Close"
            FROM djia_companies c
            JOIN djia_prices p ON c.symbol = p."Ticker"
            WHERE p."Date" = (
                SELECT MAX("Date") FROM djia_prices p2 WHERE p2."Ticker" = p."Ticker"
            )
            ORDER BY p."Close" DESC;

            4. L·∫•y gi√° ƒë√≥ng c·ª≠a trung b√¨nh c·ªßa Apple trong th√°ng 3 nƒÉm 2024:
            SELECT AVG("Close") AS avg_close
            FROM djia_prices
            WHERE "Ticker" = 'AAPL'
            AND "Date" BETWEEN '2024-03-01' AND '2024-03-31';

            5. L·∫•y danh s√°ch c√°c c√¥ng ty trong lƒ©nh v·ª±c c√¥ng ngh·ªá:
            SELECT name, sector, industry, market_cap
            FROM djia_companies
            WHERE sector = 'Technology';

            6. L·∫•y danh s√°ch c√°c c√¥ng ty c√≥ c·ªï t·ª©c cao nh·∫•t:
            SELECT c.name, p."Open", p."Close"
            FROM djia_companies c
            JOIN djia_prices p ON c.symbol = p."Ticker"
            WHERE DATE_TRUNC('day', p."Date") = '2024-05-01'::DATE

            7. L·∫•y danh s√°ch 5 c√¥ng ty c√≥ c·ªï t·ª©c trung b√¨nh cao nh·∫•t:
            SELECT c.name, AVG(p."Dividends"::FLOAT) AS avg_dividend
            FROM djia_companies c
            JOIN djia_prices p ON c.symbol = p."Ticker"
            GROUP BY c.name
            ORDER BY avg_dividend DESC
            LIMIT 5;

            8. L·∫•y gi√° ƒë√≥ng c·ª≠a c·ªßa Microsoft v√†o ng√†y 2024-03-15:
            SELECT "Date", "Ticker", "Close"
            FROM djia_prices
            WHERE "Ticker" = 'MSFT'
            AND "Date"::date = '2024-03-15';

        """
        return {"metadata_text": metadata_text.strip()}
    except Exception as e:
        print(f"‚ùå Error loading text metadata: {e}")
        return {"error": str(e)}

def load_metadata_from_txt(file_path: str) -> str:
    try:
        abs_path = os.path.abspath(file_path)
        print(f"üìÑ Attempting to load metadata from: {abs_path}")
        with open(abs_path, "r", encoding="utf-8") as f:
            return f.read()
    except Exception as e:
        print(f"‚ùå Error reading metadata: {e}")
        return ""    

def generate_sql_query(question, schema_info=None):
    """Generate SQL query from natural language question using LLM"""
    from langchain_openai import ChatOpenAI
    from langchain_core.prompts import ChatPromptTemplate
    from langchain_core.output_parsers import StrOutputParser
    import json

    # print(f"Schema preview:\n{json.dumps(schema_info, indent=2)}")
    # print(f"Prompted question:\n{question}")

    # 1. T·∫°o bi·∫øn schema_description
    if schema_info and "metadata_text" in schema_info:
        schema_description = schema_info["metadata_text"]
    else:
        schema_description = "No schema information available."

    # 2. T·∫°o sample_data (m√¥ ph·ªèng ho·∫∑c t·∫£i t·ª´ metadata)
    sample_data = get_schema_and_samples(conn=None)  # ƒë√£ ch·ª©a key 'metadata_text'
    sample_description = sample_data.get("metadata_text", "")

    # 3. Prompt k·∫øt h·ª£p c·∫£ schema v√† sample
    prompt = ChatPromptTemplate.from_template("""
You are an expert SQL developer. Generate a SQL query to answer the user's question.
Use the following database schema information:

{schema}

And some reference sample or metadata (if needed):

{sample_data}

User's question: {question}

Return ONLY the SQL query without any explanation or markdown formatting.
Make sure the query is correct PostgreSQL syntax.
""")

    chain = prompt | RunnableLambda(call_openrouter) | StrOutputParser()

    try:
        sql_query = chain.invoke({
            "schema": schema_description,
            "sample_data": sample_description,
            "question": question
        })
        return sql_query.strip()
    except Exception as e:
        print(f"‚ùå Error generating SQL: {e}")
        return ""
