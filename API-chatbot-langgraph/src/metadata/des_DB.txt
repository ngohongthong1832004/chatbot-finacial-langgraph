DJIA Database Metadata for SQL Generation with PostgreSQL
Database Overview
This database contains information about Dow Jones Industrial Average (DJIA) companies and their historical stock prices.

Tables
Table: djia_companies
This table contains information about companies that are part of the DJIA index.

Columns:
symbol (VARCHAR): The stock ticker symbol (e.g., "AAPL" for Apple Inc.) - Primary Key
name (VARCHAR): The full company name (e.g., "Apple Inc.")
sector (VARCHAR): The business sector the company operates in (e.g., "Technology")
industry (VARCHAR): The specific industry within the sector (e.g., "Consumer Electronics")
country (VARCHAR): The country where the company is headquartered (e.g., "United States")
website (VARCHAR): The official company website URL
market_cap (BIGINT): The market capitalization in USD
pe_ratio (FLOAT): The price-to-earnings ratio
dividend_yield (FLOAT): The dividend yield
52_week_high (FLOAT): The highest stock price in the last 52 weeks
52_week_low (FLOAT): The lowest stock price in the last 52 weeks
description (TEXT): A detailed description of the company's business activities
Table: djia_prices
This table contains historical daily stock price data for DJIA companies.

Columns:
Date (TIMESTAMP): The trading date
Open (FLOAT): The opening price for the trading day
High (FLOAT): The highest price during the trading day
Low (FLOAT): The lowest price during the trading day
Close (FLOAT): The closing price for the trading day
Volume (INTEGER): The number of shares traded
Dividends (FLOAT): Dividend amount if applicable
Stock_Splits (FLOAT): Stock split factor if applicable
Ticker (VARCHAR): The stock ticker symbol (e.g., "AAPL") - Foreign Key referencing djia_companies.symbol
IMPORTANT: These column names are case-sensitive in the database. When querying, you must use the exact column names with the same capitalization or enclose them in double quotes (e.g., "Ticker", not ticker or TICKER).

Relationships
The djia_prices.Ticker column is a foreign key that references the djia_companies.symbol column.
This creates a one-to-many relationship where one company (in djia_companies) can have many price records (in djia_prices).
Sample Queries
Basic Query Examples:
Get all companies in the Technology sector:
SELECT * FROM djia_companies
WHERE sector = 'Technology';
Get stock prices for Apple (AAPL) for a specific date range:
SELECT "Date", "Open", "High", "Low", "Close" 
FROM djia_prices
WHERE "Ticker" = 'AAPL'
AND "Date" BETWEEN '2023-07-01' AND '2023-07-31'
ORDER BY "Date";
Join example - Get company info along with their latest stock price:
SELECT c.symbol, c.name, c.sector, p."Date", p."Close"
FROM djia_companies c
JOIN djia_prices p ON c.symbol = p."Ticker"
WHERE p."Date" = (SELECT MAX("Date") FROM djia_prices)
ORDER BY c.sector, c.name;
Calculate average closing price by sector for a specific period:
SELECT c.sector, AVG(p."Close") as avg_closing_price
FROM djia_companies c
JOIN djia_prices p ON c.symbol = p."Ticker"
WHERE p."Date" BETWEEN '2023-06-01' AND '2023-08-31'
GROUP BY c.sector
ORDER BY avg_closing_price DESC;
Find companies with the highest percentage gain in a specific period:
WITH price_changes AS (
    SELECT 
        p."Ticker",
        c.name,
        c.sector,
        FIRST_VALUE(p."Close") OVER (PARTITION BY p."Ticker" ORDER BY p."Date") as start_price,
        LAST_VALUE(p."Close") OVER (PARTITION BY p."Ticker" ORDER BY p."Date" 
                                 ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as end_price
    FROM djia_prices p
    JOIN djia_companies c ON p."Ticker" = c.symbol
    WHERE p."Date" BETWEEN '2023-07-01' AND '2023-07-31'
)
SELECT 
    "Ticker",
    name,
    sector,
    start_price,
    end_price,
    ((end_price - start_price) / start_price * 100) as percentage_change
FROM price_changes
GROUP BY "Ticker", name, sector, start_price, end_price
ORDER BY percentage_change DESC;
Data Types and Constraints
Data Types:
Text: symbol, name, sector, industry, country, website, description, Ticker
Numeric: market_cap, pe_ratio, dividend_yield, 52_week_high, 52_week_low, Open, High, Low, Close, Volume, Dividends, Stock_Splits
Date/Time: Date
Constraints:
symbol is the primary key in the djia_companies table
Ticker in the djia_prices table is a foreign key referencing symbol in the djia_companies table
All price values (Open, High, Low, Close) should be positive numbers
Note for SQL Generation
When generating SQL queries:

Use the Ticker/symbol relationship to join the tables correctly
Be aware of date formats when filtering by dates (use 'YYYY-MM-DD' format)
Remember that market_cap is in USD and is stored as a BIGINT
The pe_ratio and dividend_yield might be NULL for some companies
IMPORTANT: Column names in the djia_prices table are case-sensitive and require double quotes in PostgreSQL:ALWAYS use double quotes for these columns: "Date", "Open", "High", "Low", "Close", "Volume", "Dividends", "Stock_Splits", "Ticker"
Example correct usage: SELECT "Date", "Open", "Close" FROM djia_prices WHERE "Ticker" = 'AAPL'
Example incorrect usage: SELECT Date, Open, Close FROM djia_prices WHERE Ticker = 'AAPL' (This will fail with error 42703)
Column names in the djia_companies table do not require double quotes as they're lowercase



đây là metadata của tôi hãy dựa vào meta data đó và trả lời các câu hỏi sinh SQL dưới đây:
